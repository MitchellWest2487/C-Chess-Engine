#ifndef ATTACKS_H
#define ATTACKS_H

#include "def.h"
//preset bitboard for knights moves
const U64 RISING_DIAGONAL = 0x102040810204080ULL;
const U64 FALLING_DIAGONAL = 0x8040201008040201ULL;

//magic number bs
const U64 rookMagics[64] = {
    0x0080001020400080ull, 0x0040001000200040ull, 0x0080081000200080ull,
    0x0080040800100080ull, 0x0080020400080080ull, 0x0080010200040080ull,
    0x0080008001000200ull, 0x0080002040800100ull, 0x0000800020400080ull,
    0x0000400020005000ull, 0x0000801000200080ull, 0x0000800800100080ull,
    0x0000800400080080ull, 0x0000800200040080ull, 0x0000800100020080ull,
    0x0000800040800100ull, 0x0000208000400080ull, 0x0000404000201000ull,
    0x0000808010002000ull, 0x0000808008001000ull, 0x0000808004000800ull,
    0x0000808002000400ull, 0x0000010100020004ull, 0x0000020000408104ull,
    0x0000208080004000ull, 0x0000200040005000ull, 0x0000100080200080ull,
    0x0000080080100080ull, 0x0000040080080080ull, 0x0000020080040080ull,
    0x0000010080800200ull, 0x0000800080004100ull, 0x0000204000800080ull,
    0x0000200040401000ull, 0x0000100080802000ull, 0x0000080080801000ull,
    0x0000040080800800ull, 0x0000020080800400ull, 0x0000020001010004ull,
    0x0000800040800100ull, 0x0000204000808000ull, 0x0000200040008080ull,
    0x0000100020008080ull, 0x0000080010008080ull, 0x0000040008008080ull,
    0x0000020004008080ull, 0x0000010002008080ull, 0x0000004081020004ull,
    0x0000204000800080ull, 0x0000200040008080ull, 0x0000100020008080ull,
    0x0000080010008080ull, 0x0000040008008080ull, 0x0000020004008080ull,
    0x0000800100020080ull, 0x0000800041000080ull, 0x00FFFCDDFCED714Aull,
    0x007FFCDDFCED714Aull, 0x003FFFCDFFD88096ull, 0x0000040810002101ull,
    0x0001000204080011ull, 0x0001000204000801ull, 0x0001000082000401ull,
    0x0001FFFAABFAD1A2ull
};
const U64 bishopMagics[64] = {
    0x0002020202020200ull, 0x0002020202020000ull, 0x0004010202000000ull,
    0x0004040080000000ull, 0x0001104000000000ull, 0x0000821040000000ull,
    0x0000410410400000ull, 0x0000104104104000ull, 0x0000040404040400ull,
    0x0000020202020200ull, 0x0000040102020000ull, 0x0000040400800000ull,
    0x0000011040000000ull, 0x0000008210400000ull, 0x0000004104104000ull,
    0x0000002082082000ull, 0x0004000808080800ull, 0x0002000404040400ull,
    0x0001000202020200ull, 0x0000800802004000ull, 0x0000800400A00000ull,
    0x0000200100884000ull, 0x0000400082082000ull, 0x0000200041041000ull,
    0x0002080010101000ull, 0x0001040008080800ull, 0x0000208004010400ull,
    0x0000404004010200ull, 0x0000840000802000ull, 0x0000404002011000ull,
    0x0000808001041000ull, 0x0000404000820800ull, 0x0001041000202000ull,
    0x0000820800101000ull, 0x0000104400080800ull, 0x0000020080080080ull,
    0x0000404040040100ull, 0x0000808100020100ull, 0x0001010100020800ull,
    0x0000808080010400ull, 0x0000820820004000ull, 0x0000410410002000ull,
    0x0000082088001000ull, 0x0000002011000800ull, 0x0000080100400400ull,
    0x0001010101000200ull, 0x0002020202000400ull, 0x0001010101000200ull,
    0x0000410410400000ull, 0x0000208208200000ull, 0x0000002084100000ull,
    0x0000000020880000ull, 0x0000001002020000ull, 0x0000040408020000ull,
    0x0004040404040000ull, 0x0002020202020000ull, 0x0000104104104000ull,
    0x0000002082082000ull, 0x0000000020841000ull, 0x0000000000208800ull,
    0x0000000010020200ull, 0x0000000404080200ull, 0x0000040404040400ull,
    0x0002020202020200ull
};
const int rookRelevantBits[64] = {
    12, 11, 11, 11, 11, 11, 11, 12,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12
};
const int bishopRelevantBits[64] = {
    6, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6
};

//MACROS
#define LINE_NORTH(square) (FILES[get_file(square)] << ((get_rank(square) + 1) << 3))
#define LINE_SOUTH(square) (FILES[get_file(square)] >> ((7 - get_rank(square)) << 3) + 1)
#define LINE_EAST(square) ((RANKS[get_rank(square)] << (get_file(square) + 1)) & RANKS[get_rank(square)])
#define LINE_WEST(square) ((RANKS[get_rank(square)] >> (8 - get_file(square))) & RANKS[get_rank(square)])

#define LINE_NE(square) (RISING_DIAGONAL << square)
#define LINE_NW(square) (RISING_DIAGONAL >> square)
#define LINE_SE(square) (FALLING_DIAGONAL << square)
#define LINE_SW(square) (FALLING_DIAGONAL >> square)

#endif
